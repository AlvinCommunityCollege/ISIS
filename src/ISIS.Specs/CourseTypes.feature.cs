// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Track Course Types")]
    public partial class TrackCourseTypesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CourseTypes.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Track Course Types", "In order to properly integrate with Datatel\nAs a scheduler\nI want to set the cour" +
                    "se type", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a credit course without a course type")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CreateACreditCourseWithoutACourseType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a credit course without a course type", new string[] {
                        "domain"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I create a course BIOL 1301 Introductory Biology without a course type");
#line 9
 testRunner.Then("the command is invalid");
#line 10
 testRunner.And("the error is \"You must select at least one course type.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a credit course with duplicate course types")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CreateACreditCourseWithDuplicateCourseTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a credit course with duplicate course types", new string[] {
                        "domain"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.When("I create an ACAD ACAD course BIOL 1301 Introductory Biology");
#line 15
 testRunner.Then("the current course type is ACAD");
#line 16
 testRunner.And("the ACAD course type is added");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a new course type")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddANewCourseType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new course type", new string[] {
                        "domain"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have created an ACAD course BIOL 1301 Introductory Biology");
#line 21
 testRunner.When("I add the NF course type");
#line 22
 testRunner.Then("the NF course type is added");
#line 23
 testRunner.And("the current course types are ACAD and NF");
#line 24
 testRunner.And("it should do nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an existing course type")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddAnExistingCourseType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an existing course type", new string[] {
                        "domain"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have created an ACAD course BIOL 1301 Introductory Biology");
#line 29
 testRunner.When("I add the ACAD course type");
#line 30
 testRunner.Then("it should do nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing a course type")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemovingACourseType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a course type", new string[] {
                        "domain"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I have created an ACAD course BIOL 1301 Introductory Biology");
#line 35
 testRunner.And("I have added the NF course type");
#line 36
 testRunner.When("I remove the ACAD course type");
#line 37
 testRunner.Then("the ACAD course type is removed");
#line 38
 testRunner.And("the current course type is NF");
#line 39
 testRunner.And("it should do nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing a non-existent course type")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemovingANon_ExistentCourseType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a non-existent course type", new string[] {
                        "domain"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have created an ACAD course BIOL 1301 Introductory Biology");
#line 44
 testRunner.When("I remove the NF course type");
#line 45
 testRunner.Then("it should do nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing the last course type")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemovingTheLastCourseType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing the last course type", new string[] {
                        "domain"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I have created an ACAD course BIOL 1301 Introductory Biology");
#line 50
 testRunner.When("I remove the ACAD course type");
#line 51
 testRunner.Then("the aggregate state is invalid");
#line 52
 testRunner.And("the error is \"Your attempt to remove the course type failed because it\'s the last" +
                    " one. Each course must have at least one course type.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
